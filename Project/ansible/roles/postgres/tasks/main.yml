---
  # Устанавливаем postgresql14-server
  - name: install postgresql-server 14
    ansible.builtin.apt: 
      name: 
          - postgresql 
          - postgresql-contrib
      state: present
      update_cache: true
  
  # Запускаем postgresql-14
  - name: enable and start service
    ansible.builtin.service:
      name: postgresql
      state: started
      enabled: true

  # Установка python-пакетов для модулей psql
  - name: install base tools
    apt:
      name:
        - acl
        - python3-pexpect
        - python3-psycopg2
      state: present
      update_cache: true

  # Создаем пользователя для репликации
  - name: Create replicator user
    become_user: postgres
    postgresql_user:
      name: replication
      password: '{{ replicator_password }}'
      role_attr_flags: REPLICATION 
    ignore_errors: true
    when: (ansible_hostname == "postgres1")

  # Останавливаем postgresql-14 на хосте postgres2
  - name: stop postgresql-server on postgres2
    service: 
      name: postgresql
      state: stopped
    when: (ansible_hostname == "postgres2")

  # Копируем конфигурационный файл postgresql.conf
  - name: copy postgresql.conf
    template:
      src: postgresql.conf.j2
      dest: /etc/postgresql/14/main/postgresql.conf
      owner: postgres
      group: postgres
      mode: '0777'
    when: (ansible_hostname == "postgres1")
  
  # Добавляем разрешения для подключения с хоста postgres2 и бэкендов
  - name: Add permission for postgres2, backend1, backend2
    lineinfile:
      path: /etc/postgresql/14/main/pg_hba.conf
      line: '{{ item }}'
    with_items:
      - 'host    replication   replication  {{ slave_ip }}/32     scram-sha-256'
      - 'host    otus          myotusapp    {{ backend1_ip }}/32  scram-sha-256'
      - 'host    otus          myotusapp    {{ backend2_ip }}/32  scram-sha-256'
    when: ansible_hostname == "postgres1"

   # Перезапускаем службу postgresql-14
  - name: restart postgresql-server on postgres1
    service: 
      name: postgresql
      state: restarted
    when: (ansible_hostname == "postgres1")

  # Удаляем содержимое каталога /var/lib/postgresql/14/main/
  - name: Remove files from data catalog
    file:
      path: /var/lib/postgresql/14/main/
      state: absent
    when: (ansible_hostname == "postgres2")

  # Копируем данные с postgres1 на postgres2
  - name: copy files from master to slave
    become_user: postgres
    expect:
      command: 'pg_basebackup -h {{ master_ip }} -U  replication -p 5432 -D /var/lib/postgresql/14/main/ -R -P'
      responses: 
        '.*Password*': "{{ replicator_password }}"
    when: (ansible_hostname == "postgres2")

  # Копируем конфигурационный файл postgresql.conf
  - name: copy postgresql.conf
    template:
      src: postgresql.conf.j2
      dest:  /etc/postgresql/14/main/postgresql.conf
      owner: postgres
      group: postgres
      mode: '0600'
    when: (ansible_hostname == "postgres2")

    # Добавляем разрешения для подключения с хоста postgres1 и бэкендов (на случай промоута slave в мастер)
  - name: Add permission for postgres1, backend1, backend2
    lineinfile:
      path: /etc/postgresql/14/main/pg_hba.conf
      line: '{{ item }}'
    with_items:
      - 'host    replication   replication  {{ master_ip }}/32    scram-sha-256'
      - 'host    otus          myotusapp    {{ backend1_ip }}/32  scram-sha-256'
      - 'host    otus          myotusapp    {{ backend2_ip }}/32  scram-sha-256'
    when: ansible_hostname == "postgres2"
   
  # Запускаем службу postgresql-14 на хосте postgres2
  - name: start postgresql-server on postgres2
    service: 
      name: postgresql
      state: started
    when: (ansible_hostname == "postgres2")
